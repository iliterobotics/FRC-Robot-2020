version '1.0-SNAPSHOT'

apply plugin: 'application'
apply plugin: 'org.openjfx.javafxplugin'
mainClassName = 'us.ilite.display.DriverStation'
apply from: 'plot.gradle'

javafx {
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.media', 'javafx.graphics', 'javafx.fxml' ]
    version = "11.0.+"
}

dependencies {
    compile project(':common')
    compile project(':robot')
//	implementation 'com.github.flybotix:highfrequencyrobots:2019.1.26'
    implementation 'com.github.HanSolo:tilesfx:1.6.5'
    implementation 'com.github.flybotix:highfrequencyrobots:' + HFRVER
    implementation 'com.github.flybotix:charts:1.0.6.alpha'

    compile name: 'jfxrt'

    compile "eu.hansolo:Medusa:+"
    compile "eu.hansolo:regulators:+"
    compile "org.kordamp.ikonli:ikonli-javafx:2.4.0"
    compile "org.kordamp.ikonli:ikonli-material-pack:2.4.0"
    compile "org.kordamp.ikonli:ikonli-materialdesign-pack:2.4.0"
    compile "org.kordamp.ikonli:ikonli-weathericons-pack:2.4.0"
    compile 'com.googlecode.json-simple:json-simple:1.1'


    runtime group: "edu.wpi.first.ntcore", name: "ntcore-jni", version: "2019.+", classifier: "all"
    compile group: "edu.wpi.first.ntcore", name: "ntcore-java", version: "2019.+"
    compile group: "edu.wpi.first.wpiutil", name: "wpiutil-java", version: "2019.+"

    def javaFxMains = [
    'tilesfxdemoMain':
        ['mainClass'   : 'eu.hansolo.tilesfxdemo.Main',
         'description' :'Executes the tile demo main'],
    'tilesfxdemoMiscDemo' : 
        ['mainClass'   : 'eu.hansolo.tilesfxdemo.MiscDemo',
         'description' :' Executes the tiles misc demo'
        ],
    'Driverstation' : 
        ['mainClass'   : 'us.ilite.display.DriverStation',
         'description' : 'The main drivers station display'
        ],
    'IliteMain' : 
        ['mainClass'   : 'us.ilite.display.Main',
         'description' : 'The main display'
        ],
    'AutonConfig' :
        ['mainClass'   : 'us.ilite.display.testing.AutonConfigDisplay',
         'description' : 'The autonomous config display'
        ],
    'TestingDisplay' : 
        ['mainClass'   : 'us.ilite.display.testing.TestingDisplay',
         'display'     : 'The testing display'
        ]
]

    //These tasks must be generated after the project has been 
    //evaluated so that the run task, which is created by the application plugin, 
    //has been fully created so that these tasks can inherit the classpath and modules.
    afterEvaluate {project->
        javaFxMains.each{key, value ->
            project.task(["type":JavaExec, "description" : value.description,"group" : "application"], 'run'+key) {
                classpath = sourceSets.main.runtimeClasspath
                main = value.mainClass
                List<String> moduleJvmArgs = new ArrayList<String>(Arrays.asList("--module-path",sourceSets.main.runtimeClasspath.getAsPath()));
                String addModules = String.join(",", project.extensions.javafx.modules);
                List<String> jvmArgs = new ArrayList<String>();
                jvmArgs.add("--add-modules");
                jvmArgs.add(addModules);
                jvmArgs.addAll(moduleJvmArgs);
                setJvmArgs(jvmArgs);
            }
        }
    }
}
